package projectfordatabaseandoop;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */


import javax.swing.*;
import java.sql.*;

public class MonitorNetProfitWindow extends javax.swing.JFrame {

    /**
     * Creates new form MonitorNetProfitWindow
     */
    public MonitorNetProfitWindow() {
        initComponents();
        setLocationRelativeTo(null);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 21)); // NOI18N
        jLabel1.setText("NET PROFIT SUMMARY");

        jButton1.setText("Daily Net Profit");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton3.setText("Yearly Net Profit");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Monthly Net Profit");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton2.setText("Back");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addGap(36, 36, 36)
                        .addComponent(jButton4)
                        .addGap(27, 27, 27)
                        .addComponent(jButton3)
                        .addGap(0, 11, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(100, 100, 100)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton2)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jButton2)))
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(36, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        displayDailyNetProfit();        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        displayMonthlyNetProfit();  
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        displayYearlyNetProfit();   
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        dispose();       
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MonitorNetProfitWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MonitorNetProfitWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MonitorNetProfitWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MonitorNetProfitWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MonitorNetProfitWindow().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    // End of variables declaration//GEN-END:variables

    private static final String URL = "jdbc:mysql://localhost:3306/inventorydbb?useSSL=false";
    private static final String USER = "root";
    private static final String PASSWORD = "Hernandez14";
    
    private void displayDailyNetProfit() {
        double totalSales = 0.0;
        double expenses = 0.0;
        double netProfit = 0.0;
        try {
            // Prompt the user for the date
            String inputDay = JOptionPane.showInputDialog(this, "Enter the day (e.g., 1-31):");
            if (inputDay == null) {
            return;
        }
            String inputMonth = JOptionPane.showInputDialog(this, "Enter the month (e.g., 1-12):");
            if (inputMonth == null) {
            return;
        }
            String inputYear = JOptionPane.showInputDialog(this, "Enter the year (e.g., 2024):");
            if (inputYear == null) {
            return;
        }
            String saleDate = inputYear + "-" + inputMonth + "-" + inputDay;
            try (Connection conn = DriverManager.getConnection(URL, USER, PASSWORD)) {
                String query = "SELECT SUM(total_sales) AS total_sales, SUM(expenses) AS expenses, " +
                               "SUM(total_sales - expenses) AS net_profit " +
                               "FROM daily_sales_summary WHERE sale_date = ?";
    
                PreparedStatement stmt = conn.prepareStatement(query);
                stmt.setString(1, saleDate);
                ResultSet rs = stmt.executeQuery();
    
                if (rs.next()) {
                    totalSales = rs.getDouble("total_sales");
                    expenses = rs.getDouble("expenses");
                    netProfit = rs.getDouble("net_profit");
    
                    JOptionPane.showMessageDialog(this,
                            "Daily Summary:\n" +
                                    "Date: " + saleDate + "\n" +
                                    "Total Sales: ₱ " + String.format("%.2f", totalSales) + "\n" +
                                    "Expenses: ₱ " + String.format("%.2f", expenses) + "\n" +
                                    "Net Profit: ₱ " + String.format("%.2f", netProfit));
                } else {
                    JOptionPane.showMessageDialog(this, "No data available for " + saleDate + ".");
                }
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error retrieving daily summary: " + e.getMessage());
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Unexpected error: " + e.getMessage());
    }
}

private void displayMonthlyNetProfit() {
    double totalSales = 0.0;
    double expenses = 0.0;
    double netProfit = 0.0;

    String inputYear = JOptionPane.showInputDialog(this, "Enter the year (e.g., 2024):");
    if (inputYear == null) {
        return;
    }
    String inputMonth = JOptionPane.showInputDialog(this, "Enter the month (1-12):");
    if (inputMonth == null) {
        return;
    }

    if (inputYear == null || inputYear.trim().isEmpty() || inputMonth == null || inputMonth.trim().isEmpty()) {
        JOptionPane.showMessageDialog(this, "Year and month are required. Operation canceled.");
        return;
    }

    try {
        int year = Integer.parseInt(inputYear.trim());
        int month = Integer.parseInt(inputMonth.trim());

        if (month < 1 || month > 12) {
            throw new NumberFormatException();
        }

        try (Connection conn = DriverManager.getConnection(URL, USER, PASSWORD)) {
            String query = "SELECT SUM(total_sales) AS total_sales, SUM(expenses) AS expenses, " +
                           "SUM(total_sales - expenses) AS net_profit " +
                           "FROM daily_sales_summary WHERE YEAR(sale_date) = ? AND MONTH(sale_date) = ?";

            PreparedStatement stmt = conn.prepareStatement(query);
            stmt.setInt(1, year);
            stmt.setInt(2, month);
            ResultSet rs = stmt.executeQuery();

            if (rs.next()) {
                totalSales = rs.getDouble("total_sales");
                expenses = rs.getDouble("expenses");
                netProfit = rs.getDouble("net_profit");

                JOptionPane.showMessageDialog(this,
                        "Monthly Summary:\n" +
                                "Month: " + java.time.Month.of(month) + " " + year + "\n" +
                                "Total Sales: ₱ " + String.format("%.2f", totalSales) + "\n" +
                                "Expenses: ₱ " + String.format("%.2f", expenses) + "\n" +
                                "Net Profit: ₱ " + String.format("%.2f", netProfit));
            } else {
                JOptionPane.showMessageDialog(this, "No data available for this month.");
            }
        }
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "Invalid input. Please enter a valid year and month.");
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, "Error retrieving monthly summary: " + e.getMessage());
    }
}

    private void displayYearlyNetProfit() {
        double totalSales = 0.0;
        double expenses = 0.0;
        double netProfit = 0.0;

        String inputYear = JOptionPane.showInputDialog(this, "Enter the year (e.g., 2024):");
        if (inputYear == null) {
        return;
    }

        if (inputYear == null || inputYear.trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Year is required. Operation canceled.");
            return;
        }

        try {
            int year = Integer.parseInt(inputYear.trim());

            try (Connection conn = DriverManager.getConnection(URL, USER, PASSWORD)) {
                String query = "SELECT SUM(total_sales) AS total_sales, SUM(expenses) AS expenses, " +
                               "SUM(total_sales - expenses) AS net_profit " +
                               "FROM daily_sales_summary WHERE YEAR(sale_date) = ?";

                PreparedStatement stmt = conn.prepareStatement(query);
                stmt.setInt(1, year);
                ResultSet rs = stmt.executeQuery();

                if (rs.next()) {
                    totalSales = rs.getDouble("total_sales");
                    expenses = rs.getDouble("expenses");
                    netProfit = rs.getDouble("net_profit");

                    JOptionPane.showMessageDialog(this,
                            "Yearly Summary:\n" +
                                    "Year: " + year + "\n" +
                                    "Total Sales: ₱ " + String.format("%.2f", totalSales) + "\n" +
                                    "Expenses: ₱ " + String.format("%.2f", expenses) + "\n" +
                                    "Net Profit: ₱ " + String.format("%.2f", netProfit));
                } else {
                    JOptionPane.showMessageDialog(this, "No data available for this year.");
                }
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Invalid input. Please enter a valid year.");
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error retrieving yearly summary: " + e.getMessage());
        }
    }
}
